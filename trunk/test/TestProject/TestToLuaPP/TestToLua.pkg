$#include "vector"
#include "StdAfx.h"

struct TestTLV
{
	unsigned long	dwID;			// 属性ID
	unsigned long	dwType;			// 属性类型
	std::string 	strValue;		// 属性值

	TestTLV(const TestTLV &other);	//拷贝构造
	TestTLV();//构造函数
	~TestTLV();
	void TestTLV::SetDword(unsigned long dwPropertyID, unsigned long dwPropertyValue);
	void TestTLV::SetString(unsigned long dwPropertyID, const std::string &PropertyValue);

	void Test();

	bool operator==(const TestTLV &other)const;
	TestTLV& operator*();
	TestTLV& operator++();
	static volatile long g_lCount;
};

class CMyVector : public std::vector<T>
{
	TOLUA_TEMPLATE_BIND(T,TestTLV)
public:
	CMyVector();
	virtual ~CMyVector();
	void Test();
	void push_back(const T &value);
	CMyVector<T>::iterator erase(CMyVector<T>::const_iterator _Where);
	CMyVector<T>::iterator insert(CMyVector<T>::const_iterator _Where, const T& _Val);
	void clear();
	int size() const;
	const T& operator[](int index) const;
	T& operator[](int index);
	CMyVector<T>::iterator begin();
	CMyVector<T>::iterator end();
};

