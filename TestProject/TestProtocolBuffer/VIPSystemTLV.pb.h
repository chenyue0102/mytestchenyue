// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VIPSystemTLV.proto

#ifndef PROTOBUF_VIPSystemTLV_2eproto__INCLUDED
#define PROTOBUF_VIPSystemTLV_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace protobuf {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_VIPSystemTLV_2eproto();
void protobuf_AssignDesc_VIPSystemTLV_2eproto();
void protobuf_ShutdownFile_VIPSystemTLV_2eproto();

class VIPSystemTLV;

// ===================================================================

class VIPSystemTLV : public ::google::protobuf::Message {
 public:
  VIPSystemTLV();
  virtual ~VIPSystemTLV();

  VIPSystemTLV(const VIPSystemTLV& from);

  inline VIPSystemTLV& operator=(const VIPSystemTLV& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VIPSystemTLV& default_instance();

  void Swap(VIPSystemTLV* other);

  // implements Message ----------------------------------------------

  inline VIPSystemTLV* New() const { return New(NULL); }

  VIPSystemTLV* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VIPSystemTLV& from);
  void MergeFrom(const VIPSystemTLV& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VIPSystemTLV* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 dwID = 1;
  void clear_dwid();
  static const int kDwIDFieldNumber = 1;
  ::google::protobuf::int32 dwid() const;
  void set_dwid(::google::protobuf::int32 value);

  // optional int32 Type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional string strValue = 3;
  void clear_strvalue();
  static const int kStrValueFieldNumber = 3;
  const ::std::string& strvalue() const;
  void set_strvalue(const ::std::string& value);
  void set_strvalue(const char* value);
  void set_strvalue(const char* value, size_t size);
  ::std::string* mutable_strvalue();
  ::std::string* release_strvalue();
  void set_allocated_strvalue(::std::string* strvalue);

  // @@protoc_insertion_point(class_scope:google.protobuf.VIPSystemTLV)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 dwid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::internal::ArenaStringPtr strvalue_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_VIPSystemTLV_2eproto();
  friend void protobuf_AssignDesc_VIPSystemTLV_2eproto();
  friend void protobuf_ShutdownFile_VIPSystemTLV_2eproto();

  void InitAsDefaultInstance();
  static VIPSystemTLV* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// VIPSystemTLV

// optional int32 dwID = 1;
inline void VIPSystemTLV::clear_dwid() {
  dwid_ = 0;
}
inline ::google::protobuf::int32 VIPSystemTLV::dwid() const {
  // @@protoc_insertion_point(field_get:google.protobuf.VIPSystemTLV.dwID)
  return dwid_;
}
inline void VIPSystemTLV::set_dwid(::google::protobuf::int32 value) {
  
  dwid_ = value;
  // @@protoc_insertion_point(field_set:google.protobuf.VIPSystemTLV.dwID)
}

// optional int32 Type = 2;
inline void VIPSystemTLV::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 VIPSystemTLV::type() const {
  // @@protoc_insertion_point(field_get:google.protobuf.VIPSystemTLV.Type)
  return type_;
}
inline void VIPSystemTLV::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:google.protobuf.VIPSystemTLV.Type)
}

// optional string strValue = 3;
inline void VIPSystemTLV::clear_strvalue() {
  strvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VIPSystemTLV::strvalue() const {
  // @@protoc_insertion_point(field_get:google.protobuf.VIPSystemTLV.strValue)
  return strvalue_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VIPSystemTLV::set_strvalue(const ::std::string& value) {
  
  strvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.protobuf.VIPSystemTLV.strValue)
}
inline void VIPSystemTLV::set_strvalue(const char* value) {
  
  strvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.protobuf.VIPSystemTLV.strValue)
}
inline void VIPSystemTLV::set_strvalue(const char* value, size_t size) {
  
  strvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.protobuf.VIPSystemTLV.strValue)
}
inline ::std::string* VIPSystemTLV::mutable_strvalue() {
  
  // @@protoc_insertion_point(field_mutable:google.protobuf.VIPSystemTLV.strValue)
  return strvalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VIPSystemTLV::release_strvalue() {
  
  return strvalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VIPSystemTLV::set_allocated_strvalue(::std::string* strvalue) {
  if (strvalue != NULL) {
    
  } else {
    
  }
  strvalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strvalue);
  // @@protoc_insertion_point(field_set_allocated:google.protobuf.VIPSystemTLV.strValue)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_VIPSystemTLV_2eproto__INCLUDED
