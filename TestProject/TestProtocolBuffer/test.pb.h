// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef PROTOBUF_test_2eproto__INCLUDED
#define PROTOBUF_test_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace protobuf {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_test_2eproto();
void protobuf_AssignDesc_test_2eproto();
void protobuf_ShutdownFile_test_2eproto();

class Test;
class Test_Staff;

// ===================================================================

class Test_Staff : public ::google::protobuf::Message {
 public:
  Test_Staff();
  virtual ~Test_Staff();

  Test_Staff(const Test_Staff& from);

  inline Test_Staff& operator=(const Test_Staff& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Test_Staff& default_instance();

  void Swap(Test_Staff* other);

  // implements Message ----------------------------------------------

  inline Test_Staff* New() const { return New(NULL); }

  Test_Staff* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Test_Staff& from);
  void MergeFrom(const Test_Staff& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Test_Staff* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 staffid = 1;
  void clear_staffid();
  static const int kStaffidFieldNumber = 1;
  ::google::protobuf::int32 staffid() const;
  void set_staffid(::google::protobuf::int32 value);

  // optional string staffname = 2;
  void clear_staffname();
  static const int kStaffnameFieldNumber = 2;
  const ::std::string& staffname() const;
  void set_staffname(const ::std::string& value);
  void set_staffname(const char* value);
  void set_staffname(const char* value, size_t size);
  ::std::string* mutable_staffname();
  ::std::string* release_staffname();
  void set_allocated_staffname(::std::string* staffname);

  // optional int32 stafflevel = 3;
  void clear_stafflevel();
  static const int kStafflevelFieldNumber = 3;
  ::google::protobuf::int32 stafflevel() const;
  void set_stafflevel(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.protobuf.Test.Staff)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr staffname_;
  ::google::protobuf::int32 staffid_;
  ::google::protobuf::int32 stafflevel_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static Test_Staff* default_instance_;
};
// -------------------------------------------------------------------

class Test : public ::google::protobuf::Message {
 public:
  Test();
  virtual ~Test();

  Test(const Test& from);

  inline Test& operator=(const Test& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Test& default_instance();

  void Swap(Test* other);

  // implements Message ----------------------------------------------

  inline Test* New() const { return New(NULL); }

  Test* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Test& from);
  void MergeFrom(const Test& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Test* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Test_Staff Staff;

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // repeated string propertyvalues = 3;
  int propertyvalues_size() const;
  void clear_propertyvalues();
  static const int kPropertyvaluesFieldNumber = 3;
  const ::std::string& propertyvalues(int index) const;
  ::std::string* mutable_propertyvalues(int index);
  void set_propertyvalues(int index, const ::std::string& value);
  void set_propertyvalues(int index, const char* value);
  void set_propertyvalues(int index, const char* value, size_t size);
  ::std::string* add_propertyvalues();
  void add_propertyvalues(const ::std::string& value);
  void add_propertyvalues(const char* value);
  void add_propertyvalues(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& propertyvalues() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_propertyvalues();

  // repeated .google.protobuf.Test.Staff StaffArray = 4;
  int staffarray_size() const;
  void clear_staffarray();
  static const int kStaffArrayFieldNumber = 4;
  const ::google::protobuf::Test_Staff& staffarray(int index) const;
  ::google::protobuf::Test_Staff* mutable_staffarray(int index);
  ::google::protobuf::Test_Staff* add_staffarray();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Test_Staff >&
      staffarray() const;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Test_Staff >*
      mutable_staffarray();

  // @@protoc_insertion_point(class_scope:google.protobuf.Test)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> propertyvalues_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Test_Staff > staffarray_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static Test* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Test_Staff

// optional int32 staffid = 1;
inline void Test_Staff::clear_staffid() {
  staffid_ = 0;
}
inline ::google::protobuf::int32 Test_Staff::staffid() const {
  // @@protoc_insertion_point(field_get:google.protobuf.Test.Staff.staffid)
  return staffid_;
}
inline void Test_Staff::set_staffid(::google::protobuf::int32 value) {
  
  staffid_ = value;
  // @@protoc_insertion_point(field_set:google.protobuf.Test.Staff.staffid)
}

// optional string staffname = 2;
inline void Test_Staff::clear_staffname() {
  staffname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Test_Staff::staffname() const {
  // @@protoc_insertion_point(field_get:google.protobuf.Test.Staff.staffname)
  return staffname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Test_Staff::set_staffname(const ::std::string& value) {
  
  staffname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.protobuf.Test.Staff.staffname)
}
inline void Test_Staff::set_staffname(const char* value) {
  
  staffname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.protobuf.Test.Staff.staffname)
}
inline void Test_Staff::set_staffname(const char* value, size_t size) {
  
  staffname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.protobuf.Test.Staff.staffname)
}
inline ::std::string* Test_Staff::mutable_staffname() {
  
  // @@protoc_insertion_point(field_mutable:google.protobuf.Test.Staff.staffname)
  return staffname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Test_Staff::release_staffname() {
  
  return staffname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Test_Staff::set_allocated_staffname(::std::string* staffname) {
  if (staffname != NULL) {
    
  } else {
    
  }
  staffname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), staffname);
  // @@protoc_insertion_point(field_set_allocated:google.protobuf.Test.Staff.staffname)
}

// optional int32 stafflevel = 3;
inline void Test_Staff::clear_stafflevel() {
  stafflevel_ = 0;
}
inline ::google::protobuf::int32 Test_Staff::stafflevel() const {
  // @@protoc_insertion_point(field_get:google.protobuf.Test.Staff.stafflevel)
  return stafflevel_;
}
inline void Test_Staff::set_stafflevel(::google::protobuf::int32 value) {
  
  stafflevel_ = value;
  // @@protoc_insertion_point(field_set:google.protobuf.Test.Staff.stafflevel)
}

// -------------------------------------------------------------------

// Test

// optional string name = 1;
inline void Test::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Test::name() const {
  // @@protoc_insertion_point(field_get:google.protobuf.Test.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Test::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.protobuf.Test.name)
}
inline void Test::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.protobuf.Test.name)
}
inline void Test::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.protobuf.Test.name)
}
inline ::std::string* Test::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.protobuf.Test.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Test::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Test::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.protobuf.Test.name)
}

// optional int32 id = 2;
inline void Test::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Test::id() const {
  // @@protoc_insertion_point(field_get:google.protobuf.Test.id)
  return id_;
}
inline void Test::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:google.protobuf.Test.id)
}

// repeated string propertyvalues = 3;
inline int Test::propertyvalues_size() const {
  return propertyvalues_.size();
}
inline void Test::clear_propertyvalues() {
  propertyvalues_.Clear();
}
inline const ::std::string& Test::propertyvalues(int index) const {
  // @@protoc_insertion_point(field_get:google.protobuf.Test.propertyvalues)
  return propertyvalues_.Get(index);
}
inline ::std::string* Test::mutable_propertyvalues(int index) {
  // @@protoc_insertion_point(field_mutable:google.protobuf.Test.propertyvalues)
  return propertyvalues_.Mutable(index);
}
inline void Test::set_propertyvalues(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.protobuf.Test.propertyvalues)
  propertyvalues_.Mutable(index)->assign(value);
}
inline void Test::set_propertyvalues(int index, const char* value) {
  propertyvalues_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.protobuf.Test.propertyvalues)
}
inline void Test::set_propertyvalues(int index, const char* value, size_t size) {
  propertyvalues_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.protobuf.Test.propertyvalues)
}
inline ::std::string* Test::add_propertyvalues() {
  return propertyvalues_.Add();
}
inline void Test::add_propertyvalues(const ::std::string& value) {
  propertyvalues_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.protobuf.Test.propertyvalues)
}
inline void Test::add_propertyvalues(const char* value) {
  propertyvalues_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.protobuf.Test.propertyvalues)
}
inline void Test::add_propertyvalues(const char* value, size_t size) {
  propertyvalues_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.protobuf.Test.propertyvalues)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Test::propertyvalues() const {
  // @@protoc_insertion_point(field_list:google.protobuf.Test.propertyvalues)
  return propertyvalues_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Test::mutable_propertyvalues() {
  // @@protoc_insertion_point(field_mutable_list:google.protobuf.Test.propertyvalues)
  return &propertyvalues_;
}

// repeated .google.protobuf.Test.Staff StaffArray = 4;
inline int Test::staffarray_size() const {
  return staffarray_.size();
}
inline void Test::clear_staffarray() {
  staffarray_.Clear();
}
inline const ::google::protobuf::Test_Staff& Test::staffarray(int index) const {
  // @@protoc_insertion_point(field_get:google.protobuf.Test.StaffArray)
  return staffarray_.Get(index);
}
inline ::google::protobuf::Test_Staff* Test::mutable_staffarray(int index) {
  // @@protoc_insertion_point(field_mutable:google.protobuf.Test.StaffArray)
  return staffarray_.Mutable(index);
}
inline ::google::protobuf::Test_Staff* Test::add_staffarray() {
  // @@protoc_insertion_point(field_add:google.protobuf.Test.StaffArray)
  return staffarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Test_Staff >&
Test::staffarray() const {
  // @@protoc_insertion_point(field_list:google.protobuf.Test.StaffArray)
  return staffarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Test_Staff >*
Test::mutable_staffarray() {
  // @@protoc_insertion_point(field_mutable_list:google.protobuf.Test.StaffArray)
  return &staffarray_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_test_2eproto__INCLUDED
