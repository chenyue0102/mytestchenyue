// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VIPSystemTLV.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "VIPSystemTLV.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* VIPSystemTLV_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VIPSystemTLV_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_VIPSystemTLV_2eproto() {
  protobuf_AddDesc_VIPSystemTLV_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "VIPSystemTLV.proto");
  GOOGLE_CHECK(file != NULL);
  VIPSystemTLV_descriptor_ = file->message_type(0);
  static const int VIPSystemTLV_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPSystemTLV, dwid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPSystemTLV, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPSystemTLV, strvalue_),
  };
  VIPSystemTLV_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VIPSystemTLV_descriptor_,
      VIPSystemTLV::default_instance_,
      VIPSystemTLV_offsets_,
      -1,
      -1,
      -1,
      sizeof(VIPSystemTLV),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPSystemTLV, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPSystemTLV, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_VIPSystemTLV_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VIPSystemTLV_descriptor_, &VIPSystemTLV::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_VIPSystemTLV_2eproto() {
  delete VIPSystemTLV::default_instance_;
  delete VIPSystemTLV_reflection_;
}

void protobuf_AddDesc_VIPSystemTLV_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022VIPSystemTLV.proto\022\017google.protobuf\"<\n"
    "\014VIPSystemTLV\022\014\n\004dwID\030\001 \001(\005\022\014\n\004Type\030\002 \001("
    "\005\022\020\n\010strValue\030\003 \001(\tb\006proto3", 107);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "VIPSystemTLV.proto", &protobuf_RegisterTypes);
  VIPSystemTLV::default_instance_ = new VIPSystemTLV();
  VIPSystemTLV::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_VIPSystemTLV_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_VIPSystemTLV_2eproto {
  StaticDescriptorInitializer_VIPSystemTLV_2eproto() {
    protobuf_AddDesc_VIPSystemTLV_2eproto();
  }
} static_descriptor_initializer_VIPSystemTLV_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int VIPSystemTLV::kDwIDFieldNumber;
const int VIPSystemTLV::kTypeFieldNumber;
const int VIPSystemTLV::kStrValueFieldNumber;
#endif  // !_MSC_VER

VIPSystemTLV::VIPSystemTLV()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.protobuf.VIPSystemTLV)
}

void VIPSystemTLV::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

VIPSystemTLV::VIPSystemTLV(const VIPSystemTLV& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.protobuf.VIPSystemTLV)
}

void VIPSystemTLV::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dwid_ = 0;
  type_ = 0;
  strvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

VIPSystemTLV::~VIPSystemTLV() {
  // @@protoc_insertion_point(destructor:google.protobuf.VIPSystemTLV)
  SharedDtor();
}

void VIPSystemTLV::SharedDtor() {
  strvalue_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void VIPSystemTLV::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VIPSystemTLV::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VIPSystemTLV_descriptor_;
}

const VIPSystemTLV& VIPSystemTLV::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VIPSystemTLV_2eproto();
  return *default_instance_;
}

VIPSystemTLV* VIPSystemTLV::default_instance_ = NULL;

VIPSystemTLV* VIPSystemTLV::New(::google::protobuf::Arena* arena) const {
  VIPSystemTLV* n = new VIPSystemTLV;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VIPSystemTLV::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VIPSystemTLV*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(dwid_, type_);
  strvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool VIPSystemTLV::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.protobuf.VIPSystemTLV)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dwID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }

      // optional int32 Type = 2;
      case 2: {
        if (tag == 16) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_strValue;
        break;
      }

      // optional string strValue = 3;
      case 3: {
        if (tag == 26) {
         parse_strValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strvalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->strvalue().data(), this->strvalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "google.protobuf.VIPSystemTLV.strValue");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.protobuf.VIPSystemTLV)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.protobuf.VIPSystemTLV)
  return false;
#undef DO_
}

void VIPSystemTLV::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.protobuf.VIPSystemTLV)
  // optional int32 dwID = 1;
  if (this->dwid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dwid(), output);
  }

  // optional int32 Type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional string strValue = 3;
  if (this->strvalue().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strvalue().data(), this->strvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "google.protobuf.VIPSystemTLV.strValue");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->strvalue(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.protobuf.VIPSystemTLV)
}

::google::protobuf::uint8* VIPSystemTLV::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.protobuf.VIPSystemTLV)
  // optional int32 dwID = 1;
  if (this->dwid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dwid(), target);
  }

  // optional int32 Type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional string strValue = 3;
  if (this->strvalue().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strvalue().data(), this->strvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "google.protobuf.VIPSystemTLV.strValue");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->strvalue(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.protobuf.VIPSystemTLV)
  return target;
}

int VIPSystemTLV::ByteSize() const {
  int total_size = 0;

  // optional int32 dwID = 1;
  if (this->dwid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dwid());
  }

  // optional int32 Type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // optional string strValue = 3;
  if (this->strvalue().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strvalue());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VIPSystemTLV::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VIPSystemTLV* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VIPSystemTLV*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VIPSystemTLV::MergeFrom(const VIPSystemTLV& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.dwid() != 0) {
    set_dwid(from.dwid());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.strvalue().size() > 0) {

    strvalue_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strvalue_);
  }
}

void VIPSystemTLV::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VIPSystemTLV::CopyFrom(const VIPSystemTLV& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VIPSystemTLV::IsInitialized() const {

  return true;
}

void VIPSystemTLV::Swap(VIPSystemTLV* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VIPSystemTLV::InternalSwap(VIPSystemTLV* other) {
  std::swap(dwid_, other->dwid_);
  std::swap(type_, other->type_);
  strvalue_.Swap(&other->strvalue_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VIPSystemTLV::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VIPSystemTLV_descriptor_;
  metadata.reflection = VIPSystemTLV_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VIPSystemTLV

// optional int32 dwID = 1;
 void VIPSystemTLV::clear_dwid() {
  dwid_ = 0;
}
 ::google::protobuf::int32 VIPSystemTLV::dwid() const {
  // @@protoc_insertion_point(field_get:google.protobuf.VIPSystemTLV.dwID)
  return dwid_;
}
 void VIPSystemTLV::set_dwid(::google::protobuf::int32 value) {
  
  dwid_ = value;
  // @@protoc_insertion_point(field_set:google.protobuf.VIPSystemTLV.dwID)
}

// optional int32 Type = 2;
 void VIPSystemTLV::clear_type() {
  type_ = 0;
}
 ::google::protobuf::int32 VIPSystemTLV::type() const {
  // @@protoc_insertion_point(field_get:google.protobuf.VIPSystemTLV.Type)
  return type_;
}
 void VIPSystemTLV::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:google.protobuf.VIPSystemTLV.Type)
}

// optional string strValue = 3;
 void VIPSystemTLV::clear_strvalue() {
  strvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& VIPSystemTLV::strvalue() const {
  // @@protoc_insertion_point(field_get:google.protobuf.VIPSystemTLV.strValue)
  return strvalue_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VIPSystemTLV::set_strvalue(const ::std::string& value) {
  
  strvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.protobuf.VIPSystemTLV.strValue)
}
 void VIPSystemTLV::set_strvalue(const char* value) {
  
  strvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.protobuf.VIPSystemTLV.strValue)
}
 void VIPSystemTLV::set_strvalue(const char* value, size_t size) {
  
  strvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.protobuf.VIPSystemTLV.strValue)
}
 ::std::string* VIPSystemTLV::mutable_strvalue() {
  
  // @@protoc_insertion_point(field_mutable:google.protobuf.VIPSystemTLV.strValue)
  return strvalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VIPSystemTLV::release_strvalue() {
  
  return strvalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VIPSystemTLV::set_allocated_strvalue(::std::string* strvalue) {
  if (strvalue != NULL) {
    
  } else {
    
  }
  strvalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strvalue);
  // @@protoc_insertion_point(field_set_allocated:google.protobuf.VIPSystemTLV.strValue)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
